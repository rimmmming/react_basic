{"version":3,"sources":["../../React/react_basic/src/MyName.js","../../React/react_basic/src/App.js","../../React/react_basic/src/serviceWorker.js","../../React/react_basic/src/index.js"],"names":["MyName","state","number","username","message","handleChange","e","_this","setState","Object","defineProperty","target","name","value","handleClick","alert","handleKeyPress","key","_this2","this","react_default","a","createElement","className","props","onClick","type","placeholder","onChange","onKeyPress","Component","defaultProps","App","src_MyName","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,6MAQFC,MAAQ,CACJC,OAAS,EACTC,SAAU,GACVC,QAAU,MAGdC,aAAe,SAACC,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOC,KAAQN,EAAEK,OAAOE,WAInCC,YAAc,WACVC,MAAMR,EAAKN,MAAME,SAAS,IAAMI,EAAKN,MAAMG,SAC3CG,EAAKC,SAAS,CACVL,SAAU,GACVC,QAAS,QAIjBY,eAAiB,SAACV,GACD,UAAVA,EAAEW,KACDV,EAAKO,uFAGL,IAAAI,EAAAC,KACJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,uEAAiBF,EAAAC,EAAAC,cAAA,SAAIH,KAAKK,MAAMZ,MAAhC,uBACAQ,EAAAC,EAAAC,cAAA,2BAASH,KAAKlB,MAAMC,QACpBkB,EAAAC,EAAAC,cAAA,UAAQG,QAAU,WACVP,EAAKV,SAAS,CACVN,OAAQgB,EAAKjB,MAAMC,OAAS,MAFxC,sBAKckB,EAAAC,EAAAC,cAAA,WACdF,EAAAC,EAAAC,cAAA,SACAI,KAAK,OACLd,KAAK,WACLe,YAAY,eACZd,MAAOM,KAAKlB,MAAME,SAClByB,SAAUT,KAAKd,eACfe,EAAAC,EAAAC,cAAA,SACAI,KAAK,OACLd,KAAK,UACLe,YAAY,oDACZd,MAAOM,KAAKlB,MAAMG,QAClBwB,SAAUT,KAAKd,aACfwB,WAAYV,KAAKH,iBACjBI,EAAAC,EAAAC,cAAA,UAAQG,QAASN,KAAKL,aAAtB,wBAzDKgB,aAAf9B,EACK+B,aAAe,CAClBnB,KAAO,sBA6DAZ,QCtDAgC,0LANX,OACEZ,EAAAC,EAAAC,cAACW,EAAD,CAAQrB,KAAK,8BAHDkB,cCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c0f6fcaa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass MyName extends Component{\n    static defaultProps = {\n        name : \"이정림\"\n    }\n    static propTypes = {\n        name : PropTypes.string\n    }\n\n    state = {\n        number : 0,\n        username: \"\",\n        message : \"\"\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    handleClick = () => {\n        alert(this.state.username+':' + this.state.message);\n        this.setState({\n            username: \"\",\n            message: \"\"\n        })\n    }\n\n    handleKeyPress = (e) => {\n        if(e.key === 'Enter'){\n            this.handleClick();\n        }\n    }\n    render(){\n        return(\n            <div className=\"content\">\n                <div>안녕하세요. 내 이름은<b>{this.props.name}</b>입니다.</div>\n                <p>나이 : {this.state.number}</p>\n                <button onClick={ () => {\n                        this.setState({\n                            number: this.state.number + 1\n                        })  \n                    }\n                }>더하기</button><br />\n                <input \n                type=\"text\" \n                name=\"username\" \n                placeholder=\"이름\" \n                value={this.state.username} \n                onChange={this.handleChange} />\n                <input \n                type=\"text\" \n                name=\"message\" \n                placeholder=\"아무말이나 쓰세여\" \n                value={this.state.message} \n                onChange={this.handleChange}\n                onKeyPress={this.handleKeyPress} />\n                <button onClick={this.handleClick}>확인</button>\n            </div>\n        )\n    }\n}\n\nexport default MyName;","import React, { Component } from 'react';\nimport MyName from './MyName';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <MyName name=\"리액트\" />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}